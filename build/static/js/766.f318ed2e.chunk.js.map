{"version":3,"file":"static/js/766.f318ed2e.chunk.js","mappings":"mJA8DA,QA5DA,WAGE,MAAOA,EAASC,IAAcC,EAAAA,EAAAA,UAAS,IAGhCC,EAAMC,IAAWF,EAAAA,EAAAA,UAAS,IAcjC,OAEEG,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,aACJF,EAAAA,EAAAA,MAAA,OAAKI,UAAU,uDAAsDF,SAAA,EAEnEC,EAAAA,EAAAA,KAAA,UAAQE,QAjBIC,IAAOX,GAAW,GAAKA,EAAU,GAAMC,EAAWD,EAAU,GAAKY,MAAM,wBAiBvDH,UAAU,sCAAqCF,SAAC,MAAU,KAACC,EAAAA,EAAAA,KAAA,UAAMA,EAAAA,EAAAA,KAAA,UAE7FA,EAAAA,EAAAA,KAAA,KAAGC,UAAU,OAAMF,SAAEP,KACrBQ,EAAAA,EAAAA,KAAA,UAAQE,QAjBIG,IAAmB,IAAZb,EAAiBC,EAAWD,EAAU,GAAKY,MAAM,wBAiBxCH,UAAU,qCAAoCF,SAAC,UAE7EC,EAAAA,EAAAA,KAAA,UAEAA,EAAAA,EAAAA,KAAA,MAAAD,SAAI,kBACJF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,SApBK,OAyBJC,EAAAA,EAAAA,KAAA,QAAMC,UAAU,kCAAiCF,SAAC,mCAGtDC,EAAAA,EAAAA,KAAA,UAAMA,EAAAA,EAAAA,KAAA,UAENA,EAAAA,EAAAA,KAAA,MAAAD,SAAI,oBAEJC,EAAAA,EAAAA,KAAA,UAAQE,QA7BEI,IAAMV,EAAQW,SAASC,OAAO,iBA6BjBT,SAAC,gBACxBF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,WAASJ,KAGA,KAATA,EACKA,GAAQ,GAAM,YAAgBA,GAAQ,GAAM,UAAY,YAC1D,KAMZ,C","sources":["components/Day 12 and 13 form_handling_ternary_&&/TernaryOperator.jsx"],"sourcesContent":["import React, { useState } from 'react'\r\n\r\nfunction TernaryOpetor() {\r\n\r\n  // counter useState\r\n  const [counter, setCounter] = useState(5)\r\n\r\n  // marks useState => store marks taken from input prompt\r\n  const [mark, setMark] = useState(\"\")\r\n\r\n  // Function increment  => increment counter value by 1 is min >=5 and  max<20\r\n  const increment = () => (counter >= 5 && counter < 20) ? setCounter(counter + 1) : alert(\"maximum number reach\");\r\n\r\n  // Function decrement => decrease counter by 1 until not equal to5\r\n  const decrement = () => (counter !== 5) ? setCounter(counter - 1) : alert(\"minimum number Reach\");\r\n\r\n  const age = 17;\r\n\r\n  // Function  marks => \r\n  const marks = () => setMark(parseInt(prompt(\"Enter marks\")));\r\n\r\n  // conditionalExpression ? truthyValue : falsyValue\r\n  return (\r\n\r\n    <>\r\n      <h3>Counter</h3>\r\n      <div className='d-flex justify-content-center align-item-center mt-5'>\r\n\r\n        <button onClick={increment} className='btn bg-success text-white px-3 py-2'>+</button> <br /><br />\r\n\r\n        <p className='mx-3'>{counter}</p>\r\n        <button onClick={decrement} className='btn bg-danger text-white px-3 py-2'>-</button>\r\n      </div>\r\n      <br />\r\n\r\n      <h3>Age validate</h3>\r\n      <p>Age:- {age}</p>\r\n\r\n      {age >= 18\r\n        ? <span className='bg-success text-white'>You are Eligible for vote</span>\r\n\r\n        : <span className='bg-danger text-white text-white'>You are not Eligible for vote</span>\r\n      }\r\n\r\n      <br /><br />\r\n\r\n      <h3>Nested Ternary</h3>\r\n\r\n      <button onClick={marks}>Take input</button>\r\n      <p>Marks:- {mark}</p>\r\n\r\n      {\r\n        (mark !== \"\")\r\n          ? ((mark >= 70) ? \"Excellent\" : ((mark >= 50) ? \"Average\" : \"Do better\"))\r\n          : \"\"\r\n      }\r\n\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TernaryOpetor;\r\n\r\n//* &&   Logical AND assignment\r\n// let a = 1;\r\n// let b = 0;\r\n\r\n// a &&= 2;\r\n// console.log(a);\r\n// Expected output: 2\r\n\r\n\r\n// 0, NaN, null, undefined, false   => falsy value\r\n//* if  lefthand &&=righthand\r\n//* lefthand => falsy  return lefthand value\r\n//* lefthand => assign rightValue to lefthand variable\r\n\r\n// let x = 6;\r\n// let y = 3;\r\n// (x < 10 && y > 1)  // return true\r\n\r\n// Logical AND assignment short-circuits, meaning that x &&= y is equivalent to x && (x = y), except that the expression x is only evaluated once.\r\n\r\n//* ??   nullish coalescing \r\n// const foo = null ?? 'default string';\r\n// console.log(foo);\r\n//  Expected output: \"default string\"\r\n\r\n// The nullish coalescing (??) operator is a logical operator that returns its right-hand side operand when its left-hand side operand is null or undefined, and otherwise returns its left-hand side operand.\r\n\r\n//* || \r\n// let x = 0;\r\n// x ||= 2;\r\n// console.log(x); // Output will be 2\r\n\r\n//* lefthand truthy  return lefthand value\r\n//* lefthand falsy  return righthand value"],"names":["counter","setCounter","useState","mark","setMark","_jsxs","_Fragment","children","_jsx","className","onClick","increment","alert","decrement","marks","parseInt","prompt"],"sourceRoot":""}