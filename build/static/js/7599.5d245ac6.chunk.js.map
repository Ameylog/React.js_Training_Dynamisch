{"version":3,"file":"static/js/7599.5d245ac6.chunk.js","mappings":"qJAyDA,QArDA,WAEI,MAAOA,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,GAE7BC,GAASC,EAAAA,EAAAA,QAAO,IAGfC,EAAYC,IAAiBJ,EAAAA,EAAAA,UAAS,IAEvCK,GAAYH,EAAAA,EAAAA,QAAO,GAYzB,OANAI,EAAAA,EAAAA,YAAU,KAGPL,EAAOM,QAAUN,EAAOM,QAAU,CAAC,GACpC,CAACT,KAGCU,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,iBAAgBC,EAAAA,EAAAA,KAAA,UACpBA,EAAAA,EAAAA,KAAA,KAAAD,SAAG,aACHD,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,eAAaX,MAEhBY,EAAAA,EAAAA,KAAA,SAAOC,IAAKN,EACRO,KAAK,OACLC,MAAOV,EACPW,SAAWC,GAAMX,EAAcW,EAAEC,OAAOH,UAE5CH,EAAAA,EAAAA,KAAA,SAAM,KAACA,EAAAA,EAAAA,KAAA,UAGPA,EAAAA,EAAAA,KAAA,UAAQO,QAxBIC,KAChBb,EAAUE,QAAQY,MAAMC,MAAQ,KAAK,EAuBJX,SAAC,kBAC9BC,EAAAA,EAAAA,KAAA,UAAMA,EAAAA,EAAAA,KAAA,UAGNA,EAAAA,EAAAA,KAAA,UAAQO,QAASA,IAAMlB,EAASD,EAAQ,GAAGW,SAAC,uBAG5CD,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,gBAAcR,EAAOM,YACxBG,EAAAA,EAAAA,KAAA,UAIAA,EAAAA,EAAAA,KAACW,EAAsB,CAACR,MAAOf,MAI3C,EAIMuB,EAAyBC,IAAgB,IAAf,MAAET,GAAOS,EACrC,MAAMC,GAAWrB,EAAAA,EAAAA,UAOjB,OALAI,EAAAA,EAAAA,YAAU,KACNkB,QAAQC,IAAIZ,GACZU,EAAShB,QAAUM,CAAK,GACzB,CAACA,KAGAL,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACID,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,kBAAgBI,MACnBL,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,mBAAiBc,EAAShB,aAC3B,C","sources":["components/Day 15 to 18 Hooks/useRef/UseRef.jsx"],"sourcesContent":["import React, {useRef } from 'react'\r\nimport { useEffect } from 'react'\r\nimport { useState } from 'react'\r\n\r\nfunction UseRef() {\r\n\r\n    const [count, setCount] = useState(0)\r\n\r\n    const count2 = useRef(0)\r\n    // const count = {current: 0}\r\n\r\n    const [inputValue, setInputValue] = useState(\"\")\r\n\r\n    const inputText = useRef(0);\r\n\r\n    const changeColor = () => {\r\n        inputText.current.style.color = \"red\";\r\n    }\r\n\r\n    useEffect(() => {\r\n    //  setCount(count => count + 1);\r\n\r\n       count2.current = count2.current + 1;\r\n    },[count]);\r\n\r\n    return (\r\n        <div>\r\n            <h3>useRef Hook</h3><br />\r\n            <p>Counter</p>\r\n            <p>Using State {count}</p>\r\n\r\n            <input ref={inputText}\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={(e) => setInputValue(e.target.value)} />\r\n\r\n            <br /> <br />\r\n\r\n\r\n            <button onClick={changeColor}>Change Color</button> \r\n            <br /><br />\r\n\r\n            \r\n            <button onClick={() => setCount(count + 1)}>Counter Increment</button>\r\n\r\n         \r\n            <p>Using useRef {count2.current}</p>\r\n            <br />\r\n\r\n\r\n\r\n            <PreviousValueComponent value={count} />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UseRef\r\n\r\nconst PreviousValueComponent = ({ value }) => {\r\n    const valuesOF = useRef();\r\n    \r\n    useEffect(() => {\r\n        console.log(value);\r\n        valuesOF.current = value;\r\n    }, [value]);\r\n\r\n    return (\r\n        <div>\r\n            <p>Current Value: {value}</p>\r\n            <p>Previous Value: {valuesOF.current}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\n//The useRef Hook allows you to persist values between renders\r\n//store a mutable value that does not cause a re-render when updated.\r\n//It can be used to access a DOM element directly.\r\n// return on one value i.e current  [object]\r\n// keep track of previous state values.\r\n\r\n//------- Imp for Forward Ref  -------------------------------\r\n\r\n// Ref is not forwarded by default: When you pass a ref as a prop to a child component, it does not automatically become a ref to the DOM element within that child component. Instead, it remains a prop and doesn't get attached to the DOM element.\r\n\r\n// Use React.forwardRef: To forward refs to child components, React provides React.forwardRef, a special function that allows you to pass refs down to child components. This way, the ref can be attached to a DOM element within the child component.\r\n \r\n// syntax \r\n\r\n// const ChildComponent = React.forwardRef((props, ref) => {\r\n//     return <div ref={ref}>Child Component</div>;\r\n//   });\r\n\r\n// wrap all component inside forwardRed , if not want write props  the use props={props variable nameinside curly barcket }"],"names":["count","setCount","useState","count2","useRef","inputValue","setInputValue","inputText","useEffect","current","_jsxs","children","_jsx","ref","type","value","onChange","e","target","onClick","changeColor","style","color","PreviousValueComponent","_ref","valuesOF","console","log"],"sourceRoot":""}