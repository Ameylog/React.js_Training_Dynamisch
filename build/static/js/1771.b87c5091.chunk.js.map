{"version":3,"file":"static/js/1771.b87c5091.chunk.js","mappings":"iKAGO,MAAMA,UAAcC,EAAAA,UAEvBC,WAAAA,CAAYC,GACRC,QAAQC,IAAI,gBACZC,MAAMH,GAAM,KA8BhBI,YAAc,KAETC,KAAKC,MAAMC,OAAUF,KAAKG,SAAS,CAAED,QAAQ,IAAWF,KAAKG,SAAS,CAAED,QAAQ,GAAO,EA9BxFF,KAAKC,MAAQ,CACTG,MAAO,EACPF,QAAQ,EAGhB,CAGAG,iBAAAA,GACIT,QAAQC,IAAI,oBAChB,CAKAS,kBAAAA,CAAmBC,EAAWC,GAC1BZ,QAAQC,IAAI,qBAGhB,CAIAY,oBAAAA,GACQb,QAAQC,IAAI,uBAEpB,CAOAa,MAAAA,GACI,OACIC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,yBAEJD,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,SAAOZ,KAAKC,MAAMG,UAErBS,EAAAA,EAAAA,KAAA,UAAQC,QAASA,IAAMd,KAAKG,SAAS,CAAEC,MAAOJ,KAAKC,MAAMG,MAAQ,IAAKQ,SAAC,eACvEC,EAAAA,EAAAA,KAAA,SAAM,KAACA,EAAAA,EAAAA,KAAA,UAEPA,EAAAA,EAAAA,KAAA,UAAQC,QAASA,IAAMd,KAAKC,MAAMG,MAAQ,EAAIJ,KAAKG,SAAS,CAAEC,MAAOJ,KAAKC,MAAMG,MAAQ,IAAQ,CAAEA,MAAO,GAAKQ,SAAC,eAC/GC,EAAAA,EAAAA,KAAA,UAAMA,EAAAA,EAAAA,KAAA,UAENA,EAAAA,EAAAA,KAAA,UAAQC,QAASA,IAAMd,KAAKG,SAAS,CAAEC,MAAO,IAAKQ,SAAC,UAAc,KAACC,EAAAA,EAAAA,KAAA,SAAM,KAACA,EAAAA,EAAAA,KAAA,UAG1EA,EAAAA,EAAAA,KAAA,UAAQC,QAASd,KAAKD,YAAYa,SAAC,WAClCZ,KAAKC,MAAMC,QAASW,EAAAA,EAAAA,KAACE,EAAM,IAAM,IAElCF,EAAAA,EAAAA,KAAA,KAAAD,SAAG,wBAKf,EAGJ,UAEA,SAASG,IACL,OACIJ,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,YACJC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,oBAGf,C","sources":["components/Day 1 class_function_Lifecycle/component_Lifecycle/Task2.jsx"],"sourcesContent":["import React, { Component } from 'react'\r\n\r\n\r\nexport class Task2 extends Component {\r\n\r\n    constructor(props) {\r\n        console.log(\"Inside Const\");\r\n        super(props)\r\n\r\n        this.state = {\r\n            count: 0,\r\n            toggle: false\r\n        };\r\n\r\n    }\r\n\r\n    // API calls, initialize state, or set up subscriptions.\r\n    componentDidMount() {\r\n        console.log(\"componentDidMount\");\r\n    }\r\n\r\n    // method is called after the component is updated.\r\n    // compare the previous props and state to the current props and state, and make any necessary changes.\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        console.log(\"componentDidUpdate\");\r\n        // console.log(\"Previous count:\", prevState.count);\r\n        // console.log(\"Current count:\", this.state.count);\r\n    }\r\n\r\n    // called before the component is unmounted from the DOM.\r\n    // You can use this method to clean up any subscriptions or timers.\r\n    componentWillUnmount() {  \r\n            console.log(\"componentWillUnmount\");\r\n        \r\n    }\r\n\r\n    toggleInput = () => {\r\n        \r\n        (this.state.toggle) ? this.setState({ toggle: false }) : this.setState({ toggle: true })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h3>Component Lifecycle</h3>\r\n                \r\n                <p>Count:{this.state.count}</p>\r\n\r\n                <button onClick={() => this.setState({ count: this.state.count + 1 })}>Increment</button>\r\n                <br /> <br />\r\n\r\n                <button onClick={() => this.state.count > 0 ? this.setState({ count: this.state.count - 1 }) : ({ count: 0 })}>Decrement</button>\r\n                <br /><br />\r\n\r\n                <button onClick={() => this.setState({ count: 0 })}>Reset</button> <br /> <br />\r\n\r\n\r\n                <button onClick={this.toggleInput}>Toggle</button>\r\n                {this.state.toggle ? <Childs /> : \"\"}\r\n\r\n                <p>Check the console</p>\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Task2;\r\n\r\nfunction Childs() {\r\n    return (\r\n        <div>\r\n            <h3>Child </h3>\r\n            <p>This is child</p>\r\n        </div>\r\n    )\r\n}"],"names":["Task2","Component","constructor","props","console","log","super","toggleInput","this","state","toggle","setState","count","componentDidMount","componentDidUpdate","prevProps","prevState","componentWillUnmount","render","_jsxs","children","_jsx","onClick","Childs"],"sourceRoot":""}