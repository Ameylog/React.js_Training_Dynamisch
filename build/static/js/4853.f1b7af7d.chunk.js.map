{"version":3,"file":"static/js/4853.f1b7af7d.chunk.js","mappings":"qJAwEA,QAtEA,WAEE,MAAOA,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,CACjC,CACEC,OAAQ,EACRC,KAAM,iBAER,CACED,OAAQ,EACRC,KAAM,iBAER,CACED,OAAQ,EACRC,KAAM,oBAIHC,EAAgBC,IAAqBJ,EAAAA,EAAAA,UAAS,KAC9CK,EAAaC,IAAkBN,EAAAA,EAAAA,UAAS,CAAC,GAiBhD,OACEO,EAAAA,EAAAA,MAAA,OAAKC,GAAG,cAAaC,SAAA,EAEnBC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,0BAAyBC,EAAAA,EAAAA,KAAA,UAC7BA,EAAAA,EAAAA,KAAA,OAAKC,UAAU,QAAOF,SAEnBX,EAAMc,KAAIC,IAETH,EAAAA,EAAAA,KAAA,OACEI,WAAS,EACTC,OAASC,GAzBJD,EAACC,EAAGH,KACjBG,EAAEC,iBACFX,EAAeO,EAAK,EAuBGE,CAAOC,EAAGH,GAAMJ,SAE9BI,EAAKX,MAJEW,EAAKZ,aAUnBS,EAAAA,EAAAA,KAAA,OAAKC,UAAU,OACbO,OAAQF,IAxBZZ,EAAkB,IAAID,EAAgBE,IACtCP,EAAMqB,QAAOjB,GAAQA,EAAKD,SAAWI,EAAYJ,cACjDK,EAAe,CAAC,IAuBZc,WAAaJ,GA/BCA,KAClBA,EAAEC,gBAAgB,EA8BKG,CAAWJ,GAAGP,SAEhCN,EAAeS,KAAI,CAACV,EAAMmB,KAEzBX,EAAAA,EAAAA,KAAA,OAAAD,SACGP,EAAKA,MADEA,EAAKD,cASzB,C","sources":["components/Day 7 and Day 8 React Event/DragAndDrop.jsx"],"sourcesContent":["import React, { useState } from 'react'\r\n\r\nfunction DragAndDrop() {\r\n\r\n  const [todos, setTodos] = useState([\r\n    {\r\n      taskID: 1,\r\n      task: 'Walk the walk'\r\n    },\r\n    {\r\n      taskID: 2,\r\n      task: 'Talk the talk'\r\n    },\r\n    {\r\n      taskID: 3,\r\n      task: 'Jump the jump'\r\n    }\r\n  ])\r\n\r\n  const [completedTasks, setCompletedTasks] = useState([]);\r\n  const [draggedTask, setDraggedTask] = useState({});\r\n\r\n  const onDrag = (e, todo) => {\r\n    e.preventDefault();\r\n    setDraggedTask(todo)\r\n  }\r\n  const onDragOver = (e) => {\r\n    e.preventDefault();\r\n  }\r\n\r\n  const onDrop = (e) => {\r\n\r\n    setCompletedTasks([...completedTasks, draggedTask])\r\n    todos.filter(task => task.taskID !== draggedTask.taskID)\r\n    setDraggedTask({})\r\n  }\r\n\r\n  return (\r\n    <div id=\"draganddrop\">\r\n\r\n      <h3>Drag and Drop Events</h3><br />\r\n      <div className=\"todos\">\r\n\r\n        {todos.map(todo =>\r\n\r\n          <div key={todo.taskID}\r\n            draggable\r\n            onDrag={(e) => onDrag(e, todo)}>\r\n\r\n            {todo.task}\r\n          </div>\r\n\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"done\"\r\n        onDrop={e => onDrop(e)}\r\n        onDragOver={(e) => onDragOver(e)}>\r\n\r\n        {completedTasks.map((task, index) =>\r\n\r\n          <div key={task.taskID}>\r\n            {task.task}\r\n          </div>\r\n\r\n        )}\r\n\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DragAndDrop\r\n\r\n\r\n// Moving forward, HTML5 has four properties to make drag and drop work;\r\n// draggable, ondragstart, ondragover and ondrop.\r\n\r\n// Draggable, when added as an attribute to a HTML element, makes the target element to become draggable.\r\n\r\n// ondragstart, is called immediately the element dragged. Usually the content to be dragged about is set at this point.\r\n\r\n// ondragover, is added as an event listener to the element where the dragged content will be dropped. In other words, it is used to specify where the content is to be dropped.\r\n\r\n// ondrop, is called immediately the dragged content is released on the element that contains the ondragover event listener."],"names":["todos","setTodos","useState","taskID","task","completedTasks","setCompletedTasks","draggedTask","setDraggedTask","_jsxs","id","children","_jsx","className","map","todo","draggable","onDrag","e","preventDefault","onDrop","filter","onDragOver","index"],"sourceRoot":""}